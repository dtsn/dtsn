<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>dtsn</title>
 <link href="http://dtsn.me/atom.xml" rel="self"/>
 <link href="http://tdtsn.me/"/>
 <updated>2013-01-29T11:33:22+00:00</updated>
 <id>http://dtsn.me/</id>
 <author>
   <name>Daniel Saxil-Nielsen</name>
 </author>

 
 <entry>
   <title>U.S. Presidental Debates</title>
   <link href="http://dtsn.me/2012/10/25/US-presidental-election.html"/>
   <updated>2012-10-25T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2012/10/25/US-presidental-election</id>
   <content type="html">&lt;p style='font-size: 14px; text-align: center;'&gt;&lt;em&gt;&lt;a href='http://election.datasift.com'&gt;http://election.datasift.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The us presidential election is just around the corner. in the run up to the election there is a great deal of focus on the live debates. two debates based upon a different range of topics. this is very unfamiar to us in the uk we have only recently adopted televised live debates in the 2010 election.The past three years have just flown by but it looks like its another U.S. presential election.&lt;/p&gt;

&lt;p&gt;To prove how versatile datasift can be the marketing &amp;amp; data science teams commissioned me to create something users can see the impact of the live debates on the general population through the use of Twitter.&lt;/p&gt;

&lt;p&gt;To this end we developed a micro site of datasift.com which details a variety of information we are able to gather about what people talk about around the elections and make predictions on how we think people will vote. We are able to do this even down to a city level.&lt;/p&gt;
&lt;h3&gt;Node == real time&lt;/h3&gt;
&lt;p&gt;The major requirement of the site was to display the information we gather live to the user as the debates are happening. We are able to do this using Node.js and a client based websocket connection. This is the first time I have used node.js in production, it worked very well and managed to stay up dispite both a large number of requests and a large amount of data to be processed from DataSift.&lt;/p&gt;

&lt;p&gt;The graphs and visualisations where written with the help of D3.js a fantastic framework which helps with the manipulation of SVG elements which in turn allows us to customise the design.&lt;/p&gt;
&lt;img class='last' src='/images/posts/election.png' alt='election.datasift.com' /&gt;</content>
 </entry>
 
 <entry>
   <title>Arrow - Data Visualisation</title>
   <link href="http://dtsn.me/2012/10/04/Arrow.html"/>
   <updated>2012-10-04T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2012/10/04/Arrow</id>
   <content type="html">&lt;img class='last' src='/images/posts/arrow.png' /&gt;</content>
 </entry>
 
 <entry>
   <title>Wikistats</title>
   <link href="http://dtsn.me/2012/08/28/Wikistats.html"/>
   <updated>2012-08-28T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2012/08/28/Wikistats</id>
   <content type="html">&lt;p style='font-size: 14px;'&gt;&lt;em&gt;&lt;a href='http://wikistats.co'&gt;http://wikistats.co&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Wikistats was an orignal concept first created by @lorenzoalberton to track the number of Wikipedia edits which are happening, from this you are able to deduce the most edited item in a day and therefore be able to work out the most popular. It works really well for breaking news stories.&lt;/p&gt;
&lt;img class='last' src='/images/posts/wikistats.png' alt='wikistats.co' /&gt;</content>
 </entry>
 
 <entry>
   <title>Like Coffee?</title>
   <link href="http://dtsn.me/2012/07/17/Like-Coffee.html"/>
   <updated>2012-07-17T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2012/07/17/Like-Coffee</id>
   <content type="html">&lt;p style='font-size: 14px;'&gt;&lt;em&gt;&lt;a href='http://demo.datasift.com/coffee/'&gt;http://demo.datasift.com/coffee/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This must be a worlds first, a live infographic given you realtime updates of the demographics of people who like coffee. Created using PHP and JavaScript.&lt;/p&gt;
&lt;img class='last' src='/images/posts/coffee.png' alt='http://demo.datasift.com/coffee/m' /&gt;</content>
 </entry>
 
 <entry>
   <title>The Sound of Twitter</title>
   <link href="http://dtsn.me/2012/02/28/sound-of-twitter.html"/>
   <updated>2012-02-28T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2012/02/28/sound-of-twitter</id>
   <content type="html">&lt;p&gt;Twitter is based solely around sending text based messages to each other. However what if we could change this and interpret the text as sound?&lt;/p&gt;

&lt;p&gt;This thought inspired our latest hack-a-thon project. Alongside &lt;a href='http://twitter.com/maxtillich'&gt;@maxtillich&lt;/a&gt; and &lt;a href='http://twitter.com/aguming'&gt;@aguming&lt;/a&gt;. We decided to use &lt;a href='http://datasift.com'&gt;DataSift&lt;/a&gt; to measure the sentiment of users and assign sounds based on how happy or sad a user is.&lt;/p&gt;
&lt;h3&gt;&lt;span&gt;HTML5 Audio&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;I&amp;#8217;ve been itching to use the new &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; tag in HTML5 and it&amp;#8217;s finally gotten support in most of the major browsers. Using &lt;a href='http://twitter.com/aguming'&gt;@aguming&lt;/a&gt; music skills we created 12 different sounds to reflect each of the different moods we can determine. We then listen into DataSift and measure the average sentiment every 500 milliseconds and play the correct sound.&lt;/p&gt;

&lt;p&gt;What we get is a slightly surreal experience of how twitter sounds.&lt;/p&gt;

&lt;p&gt;What we have produced was about 24 hours of work, and made a brief introduction to the sound of Twitter.&lt;/p&gt;
&lt;div class='video'&gt;
&lt;iframe width='640' src='https://www.youtube.com/embed/z1glJZZCEUQ?rel=0' frameborder='0' height='360'&gt; &lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;This project is available on &lt;a href='https://github.com/datasift/Sound-of-Twitter'&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UPDATE - &lt;a href='http://thelisteningmachine.org/'&gt;The Listening Machine&lt;/a&gt; explores this idea more fully but is not associated with this project.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>DataSift Movies</title>
   <link href="http://dtsn.me/2012/01/20/DataSift-Movies.html"/>
   <updated>2012-01-20T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2012/01/20/DataSift-Movies</id>
   <content type="html">&lt;p&gt;Do you remember &lt;a href='http://fflick.com'&gt;fflick&lt;/a&gt;? Probably not, it was a start up brought by google for a $10 million price tag a couple of years going. What fflick did was to basically gather users movie reviews across social movies. For this hackathon we decided to do the same, but using the power of DataSift we are able to gather information and give them a score.&lt;/p&gt;

&lt;p&gt;We managed to produce a movie review site that crowd source all it&amp;#8217;s reviews and gave each movie a score based upon user sentiment to films and the split between male and female.&lt;/p&gt;

&lt;p&gt;Unfortunately DataSift Movies was never made available to the public.&lt;/p&gt;
&lt;img class='last' src='/images/posts/dsmovies.png' alt='DataSift Movies' /&gt;</content>
 </entry>
 
 <entry>
   <title>Styling Odd and Even Elements in CSS</title>
   <link href="http://dtsn.me/2010/08/17/styling-odd-and-even-elements-in-css.html"/>
   <updated>2010-08-17T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2010/08/17/styling-odd-and-even-elements-in-css</id>
   <content type="html">A part of CSS3 are a fantastic new range of selectors, these include the &lt;code&gt;;nth-child&lt;/code&gt; sudo class. These allow you to style the nth child of a parent element. Therefore you can easily style the odd:

&lt;pre class=&quot;css&quot; name=&quot;code&quot;&gt;tr:nth-child(odd)&lt;/pre&gt;

or even elements:

&lt;pre class=&quot;css&quot; name=&quot;code&quot;&gt;tr:nth-child(even)&lt;/pre&gt;

For example this is my table where I have styled each even row:

&lt;style type=&quot;text/css&quot;&gt;
.example tr:nth-child(even) { background: #DCDCDC; }
&lt;/style&gt;

&lt;table class=&quot;example&quot;&gt;
&lt;tr&gt;
&lt;td&gt;Example Data 1&lt;/td&gt;
&lt;td&gt;Example Data 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Example Data 3&lt;/td&gt;
&lt;td&gt;Example Data 4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Example Data 5&lt;/td&gt;
&lt;td&gt;Example Data 6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Example Data 7&lt;/td&gt;
&lt;td&gt;Example Data 8&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

You can find more information on this on the &lt;a href=&quot;http://www.w3.org/TR/css3-selectors/#structural-pseudos&quot;&gt;W3C CSS3 Selectors&lt;/a&gt; page.
</content>
 </entry>
 
 <entry>
   <title>Reading Geek Night</title>
   <link href="http://dtsn.me/2010/08/08/reading-geek-night.html"/>
   <updated>2010-08-08T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2010/08/08/reading-geek-night</id>
   <content type="html">I will be presenting at this months&lt;a href=&quot;http://readinggeeknight.com/event/10/&quot;&gt;Reading Geek Night&lt;/a&gt; all about 'How to build a Humoid Robot'. Here's a quick peek at the opening slide.

&lt;em&gt;Update slides below:&lt;/em&gt;

&lt;div style=&quot;width:425px&quot; id=&quot;__ss_4948654&quot;&gt;&lt;strong style=&quot;display:block;margin:12px 0 4px&quot;&gt;&lt;a href=&quot;http://www.slideshare.net/dtsn/how-to-build-a-humoid-robot&quot; title=&quot;How to build a humoid robot&quot;&gt;How to build a humoid robot&lt;/a&gt;&lt;/strong&gt;&lt;object id=&quot;__sse4948654&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=howtobuildahumoidrobot-100811154932-phpapp02&amp;stripped_title=how-to-build-a-humoid-robot&quot; /&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;/&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot;/&gt;&lt;embed name=&quot;__sse4948654&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=howtobuildahumoidrobot-100811154932-phpapp02&amp;stripped_title=how-to-build-a-humoid-robot&quot; type=&quot;application/x-shockwave-flash&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;355&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;div style=&quot;padding:5px 0 12px&quot;&gt;View more &lt;a href=&quot;http://www.slideshare.net/&quot;&gt;presentations&lt;/a&gt; from &lt;a href=&quot;http://www.slideshare.net/dtsn&quot;&gt;dtsn&lt;/a&gt;.&lt;/div&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>TweetTabs & @Anywhere</title>
   <link href="http://dtsn.me/2010/07/14/tweettabs-anywhere.html"/>
   <updated>2010-07-14T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2010/07/14/tweettabs-anywhere</id>
   <content type="html">&lt;em&gt;This was presented at &lt;a href=&quot;http://twitterdevelopernest.com/2010/05/devnest-%E2%80%93-london-twitter-developer-nest-9/&quot;&gt;Devnest 9&lt;/a&gt;&lt;/em&gt;

Developers of Twitter probably heard of @Anywhere when it was launched at Chirp, it includes componants which will enhanch a web page. Which for twitter increases the engagement for their users. These componants are cool, but hardly anything to get excitited about. @Anywhere contains a fantastic secret underneth it's hood and thats a fully JS-API. Thats right a method to interface with the Twitter API entirely in JavaScript. This is because @Anywhere provides the means to authenticate a user via OAuth using their new Twitter Connect window.

Authenticated users can achieve a lot more using the API, therefore the JS-API now lets you practically do anything that the regular API can. This is really exciting because it means that i can finally turn TweetTabs into a fully Twitter client built entirely in JavaScript.

Here's a quick example of how easy it is to post a status update using @Anywhere:

&lt;pre name=&quot;code&quot; class=&quot;js&quot;&gt;
twttr.anywhere(function(T) {
if (T.isConnected()) {
T.status.Update(‘hello world’);
}
});
&lt;/pre&gt;

You can find a lot more information regarding @Anywhere over on the &lt;a href=&quot;http://dev.twitter.com/anywhere&quot;&gt;@Anywhere dev page&lt;/a&gt;. You can also get a full list of &lt;a href=&quot;http://platform.twitter.com/js-api.html&quot;&gt;support methods&lt;/a&gt;.

&lt;h2&gt;TweetTabs&lt;/h2&gt;

So how does this all fit in with TweetTabs? Quite simply TweetTabs was never quite finished, i always intended it to be a fully Twitter Client and not just the search client that it became, this is because Twitter at the time of writing TweetTabs didn't support any methods of OAuth through JavaScript. But now it does, so i've implemented it.

You can check out a very alpha version (which is my proof of concept) at &lt;a href=&quot;http://beta.tweettabs.com&quot;&gt;http://beta.tweettabs.com&lt;/a&gt;. Please give feedback, I fully intend on integrating @Anywhere fully into TweetTabs.

&lt;h2&gt;Downsides&lt;/h2&gt;
The real big problem with the JS-API part of @Anywhere is that it is not supported (at all), there is very little documentation and most of it has changed since it was released. So it really is down to trial and error!

&lt;h2&gt;Slides&lt;/h2&gt;
Here are the slides from the talk.

&lt;object id=&quot;__sse4716451&quot; classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;425&quot; height=&quot;355&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=dtsn-devnest9-100709020920-phpapp02&amp;amp;rel=0&amp;amp;stripped_title=dtsn-devnest9&quot; /&gt;&lt;param name=&quot;name&quot; value=&quot;__sse4716451&quot; /&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;embed id=&quot;__sse4716451&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;425&quot; height=&quot;355&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=dtsn-devnest9-100709020920-phpapp02&amp;amp;rel=0&amp;amp;stripped_title=dtsn-devnest9&quot; name=&quot;__sse4716451&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
</content>
 </entry>
 
 <entry>
   <title>Link Prefetching</title>
   <link href="http://dtsn.me/2010/06/04/link-prefetching.html"/>
   <updated>2010-06-04T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2010/06/04/link-prefetching</id>
   <content type="html">Link prefetching is a very little known HTML 5 tag which is currently only supported by Firefox. It utilizes browser idle time to download documents that the user might visit in the near future.

For example:

&lt;pre class=&quot;html&quot;&gt;&amp;lt;link rel=&amp;quot;prefetch&amp;quot; href=&amp;quot;page2.html&amp;quot;&amp;gt;
&lt;/pre&gt;

Once the user has loaded up that page the next page (page2.html) will being loading significantly decreasing the time it takes to visit the next page. 

It's a great idea really, and because it's gracefully degregating it means that users in FF will get the benefit while everyone else wouldn't see the difference. Refer to the &lt;a href=&quot;https://developer.mozilla.org/en/link_prefetching_faq&quot;&gt;Mozilla FAQ&lt;/a&gt; for more information.

(via &lt;a href=&quot;http://keyboardy.com/programming/html5-link-prefetching/&quot;&gt;Keyboardy&lt;/a&gt;)
</content>
 </entry>
 
 <entry>
   <title>The 61px Standard</title>
   <link href="http://dtsn.me/2010/04/18/61px-standard.html"/>
   <updated>2010-04-18T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2010/04/18/61px-standard</id>
   <content type="html">The &lt;a href=&quot;http://tweetmeme.com&quot;&gt;TweetMeme&lt;/a&gt; button is one of the most successful social media buttons, it is served to millions of websites around the web. One of the more unusual points about the TweetMeme button is it’s height, 61px. This height has now been adopted by &lt;a href=&quot;http://facebook.com&quot;&gt;facebook &lt;/a&gt;and &lt;a href=&quot;http://digg.com&quot;&gt;digg&lt;/a&gt;.
&lt;h2&gt;Why 61px?&lt;/h2&gt;
&lt;blockquote&gt;“Cause everyone knows that 61 pixels is such a normal dimension in the world of social networking - I mean everything's 61 pixels, right? Cause it's...a prime number!”

- &lt;a href=&quot;http://twittown.com/social-networks/twitter/twitter-blog/facebook-share-badge-vs-tweetmeme-retweet-badge-side-side&quot;&gt;Twittown&lt;/a&gt;&lt;/blockquote&gt;
I would like to say that it was due to lots of research and investigation, but it was more of a accident. The button was originally designed to be 60px high but in the quest to fit an extra digit onto the button the font size was decreased and the button height was increased to 61px.
&lt;h2&gt;The Standard&lt;/h2&gt;
The TweetMeme button had a massive adoption rate, and was installed on millions of sites across the web therefore it became the one to beat! Large sites have now put pressure on the other social media sites to produce their buttons to the new standard. Therefore the 61px standard (if you have a better name let me know) is now the default for all social media buttons on the internet.
</content>
 </entry>
 
 <entry>
   <title>Optimizing JavaScript</title>
   <link href="http://dtsn.me/2010/01/12/optimizing-javascript.html"/>
   <updated>2010-01-12T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2010/01/12/optimizing-javascript</id>
   <content type="html">&lt;p&gt;JavaScript is in the middle of a massive comeback and developers are abusing it. JavaScript addons and widgets are becoming are the norm for large sites and are so easy to install, in large numbers and quantities. For example &lt;a href=&quot;http://mashable.com&quot;&gt;Mashable&lt;/a&gt; loads nearly a mega byte in JavaScript files. In this article I will go through some tips to help you optimize your JavaScript and reduce both the load on your servers and make your pages respond faster.&lt;/p&gt; 
&lt;p&gt;&lt;img style=&quot;border-bottom: 0px; border-left: 0px; display: inline; margin-left: 0px; border-top: 0px; margin-right: 0px; border-right: 0px&quot; title=&quot;js&quot; border=&quot;0&quot; alt=&quot;js&quot; src=&quot;http://dtsn.co.uk/wp-uploads/2010/01/js-thumb.png&quot; width=&quot;480&quot; height=&quot;200&quot; /&gt;&lt;/p&gt; &lt;h2&gt;Cut code&lt;/h2&gt;  &lt;p&gt;The first and biggest thing you should do in optimizing your JavaScript is to cut down on the size, cut out functions that don’t do a lot and try and reduce the size of your file. This goes along side with the question &lt;strong&gt;do you need a framework&lt;/strong&gt;? Think it through, is your site big enough to warrant loading a full framework (typically in excess of 3000 lines), if you just want to do some very simple functions write them in JavaScript without a framework.&lt;/p&gt;  &lt;p&gt;If you really need to load a framework use the ones available on the &lt;a href=&quot;http://code.google.com/apis/ajaxlibs/documentation/&quot;&gt;Google AJAX libraries API&lt;/a&gt;, most frameworks are available. These are just the frameworks hosted on Google, they work of the principle that if one website uses these files then the user will still have the files in the browser cache and won’t need load them again.&lt;/p&gt;  &lt;h3&gt;Minimize &lt;/h3&gt;  &lt;p&gt;Run your code through a JavaScript minimiser, this will shrink all the files to be really small there are a number of popular ones available (this is also applicable for CSS):&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Bundle Fu - &lt;a title=&quot;http://code.google.com/p/bundle-fu/&quot; href=&quot;http://code.google.com/p/bundle-fu/&quot;&gt;http://code.google.com/p/bundle-fu/&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Pack:tag - &lt;a title=&quot;http://sourceforge.net/projects/packtag/&quot; href=&quot;http://sourceforge.net/projects/packtag/&quot;&gt;http://sourceforge.net/projects/packtag/&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;JSMIN - &lt;a title=&quot;http://www.crockford.com/javascript/jsmin.html&quot; href=&quot;http://www.crockford.com/javascript/jsmin.html&quot;&gt;http://www.crockford.com/javascript/jsmin.html&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;YUI Compressor - &lt;a title=&quot;http://yuilibrary.com/downloads/#yuicompressor&quot; href=&quot;http://yuilibrary.com/downloads/#yuicompressor&quot;&gt;http://yuilibrary.com/downloads/#yuicompressor&lt;/a&gt; &lt;/li&gt; &lt;/ul&gt;  &lt;h2&gt;Expires headers&lt;/h2&gt;  &lt;p&gt;Set your expires headers, this should be standard for all your static content like CSS and Images as well. A browser may need to make many requests to your server in order to get all the content, by using an expires header you make those components cacheable for a set period of time, therefore the browser will need to make less HTTP requests. For a more detailed explanation, as well other components which need improving reading the &lt;a href=&quot;http://developer.yahoo.com/performance/rules.html#expires&quot;&gt;Yahoo Developer Network Guide on optimisation&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;Loading Scripts Asynchronously&lt;/h2&gt;  &lt;p&gt;Browsers are only single threaded, this means that it can only really load one thing at a time. However there are ways around this, and ways you can load multiple files without locking up the browser. Give Steve Souders articles on &lt;a href=&quot;http://www.stevesouders.com/blog/2009/04/27/loading-scripts-without-blocking/&quot;&gt;Loading Scripts without Blocking&lt;/a&gt; if you are interested in implementing this. I am currently working on a prototype based class to do this which will be published on this blog in the coming months.&lt;/p&gt;  &lt;h2&gt;Defer JavaScript Loading&lt;/h2&gt;  &lt;p&gt;Steve Souders talks about deferring JavaScript loading in his series about &lt;a href=&quot;http://www.stevesouders.com/blog/2009/12/07/downloading-javascript-as-strings/&quot;&gt;high performance websites&lt;/a&gt;. It’s quite a simple idea really, don’t load up the JavaScript until you require it. Therefore if your JavaScript is not needed on page load this should be deferred to be loaded up later.&lt;/p&gt;  &lt;h2&gt;Evaluate&lt;/h2&gt;  &lt;p&gt;Make sure you evaluate your performance when trying to optimize JavaScript. I personally love the Firefox plugin &lt;a href=&quot;http://getfirebug.com&quot;&gt;FireBug&lt;/a&gt;, and it’s plugin &lt;a href=&quot;http://developer.yahoo.com/yslow/&quot;&gt;YSlow&lt;/a&gt;. However there are lots of other methods and tools you can use to evaluate you performance, the best by far is the firebug profiler. &lt;a href=&quot;http://michaelsync.net/2007/09/10/firebug-tutorial-logging-profiling-and-commandline-part-ii&quot;&gt;Micheal Sync&lt;/a&gt; has a fantastic tutorial on the FireBug profiler which is well worth a read.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Bouncing JavaScript Tutorial</title>
   <link href="http://dtsn.me/2010/01/07/bouncing-javascript-tutorial.html"/>
   <updated>2010-01-07T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2010/01/07/bouncing-javascript-tutorial</id>
   <content type="html">&lt;p&gt;&lt;strong&gt;Original Source&lt;/strong&gt;: &lt;a href=&quot;http://giancarlo.dimassa.net/2007/07/11/elastic-and-bouncing-transitions-in-scriptaculous/&quot;&gt;http://giancarlo.dimassa.net&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;There have been many examples of bouncing effects in &lt;a href=&quot;http://script.aculo.us/&quot;&gt;scriptaculous&lt;/a&gt; but this one has to be one of the most realistic. It uses the equations developed by &lt;a href=&quot;http://www.robertpenner.com/&quot;&gt;Robert Penner&lt;/a&gt; to accurately represent a bounce, and it does look cool.&lt;/p&gt;  &lt;h2&gt;What you need&lt;/h2&gt;  &lt;p&gt;As with most of my tutorials this is based on &lt;a href=&quot;http://script.aculo.us/&quot;&gt;scriptaculous&lt;/a&gt; and &lt;a href=&quot;http://www.prototypejs.org/&quot;&gt;prototype&lt;/a&gt;, but the equations could easily be porter to other animation frameworks.&lt;/p&gt;  &lt;h2&gt;The code&lt;/h2&gt;  &lt;p&gt;This is really simple, basically what we are going to be doing is to add a new transitional effect to scriptaculous. To do this we just extend the Effect class.&lt;/p&gt;  &lt;p&gt;&lt;strong&gt;Add this to your own JavaScript file instead of scriptaculous, so you don’t loose it when you update.&lt;/strong&gt;&lt;/p&gt;  &lt;pre class=&quot;js&quot; name=&quot;code&quot;&gt;/*Based on Easing Equations v2.0
(c) 2003 Robert Penner, all rights reserved.
This work is subject to the terms in http://www.robertpenner.com/easing_terms_of_use.html

Adapted for Scriptaculous by Ken Snyder (kendsnyder ~at~ gmail ~dot~ com) June 2006
*/

Effect.Transitions.Bounce = function (pos) {
    if (pos &amp;lt; 0.36363636363636365) {
        return 7.5625 * pos * pos;
    } else if (pos &amp;lt; 0.7272727272727273) {
        return 7.5625 * (pos -= 0.5454545454545454) * pos + 0.75;
    } else if (pos &amp;lt; 0.9090909090909091) {
        return 7.5625 * (pos -= 0.8181818181818182) * pos + 0.9375;
    } else {
        return 7.5625 * (pos -= 0.9545454545454546) * pos + 0.984375;
    }
}&lt;/pre&gt;

&lt;h2&gt;Use it&lt;/h2&gt;

&lt;p&gt;You can use this effect as a transition type with lots of effects.&lt;/p&gt;

&lt;pre&gt;new Effect.BlindDown(div, {
    duration: 0.5,
    transition: Effect.Transitions.Bounce
});&lt;/pre&gt;

&lt;p&gt;Check out &lt;a href=&quot;http://giancarlo.dimassa.net/2007/07/11/elastic-and-bouncing-transitions-in-scriptaculous/&quot;&gt;Ken Snyder’s&lt;/a&gt; blog for more transitional effects.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CSS3 Selectors :last-child</title>
   <link href="http://dtsn.me/2009/12/15/css3-selectors-last-child.html"/>
   <updated>2009-12-15T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2009/12/15/css3-selectors-last-child</id>
   <content type="html">&lt;p&gt;Of all the &lt;a href=&quot;http://web.archive.org/web/20080503011837/http://www.w3.org/TR/css3-selectors/&quot;&gt;CSS3 selectors&lt;/a&gt; the structural pseudo-classes have to be my favourite. In particular I love :last-child selector, the :last-child CSS selector is incredibly powerful especially when positioning elements in a row, I am currently finding it incredibly useful when doing menus. Instead of providing a last class on the very last element in the row, you can now use pure CSS to achieve the same effect.&lt;/p&gt;  &lt;h3&gt;CSS 2.1&lt;/h3&gt;  

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;/*&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;Each&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;/*&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;margin&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;lines&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;up&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.image.last&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;CSS 3&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* parent of the image element */&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.parent&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:last-child&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin-right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;The Downside&lt;/h3&gt;

&lt;p&gt;Unfortunately the bad aspect of this selector is that it does not fail gracefully. Meaning that a user in a none CSS3 compliant browser, &lt;strong&gt;(IE)&lt;/strong&gt;, it would fail horribly, this means that everything will be out of line.&lt;/p&gt;

&lt;h3&gt;Example&lt;/h3&gt;

&lt;p&gt;If you look at this in anything but a browser which supports CSS3 the last element won't be red.&lt;/p&gt;
&lt;style type=&quot;text/css&quot;&gt;
.example { margin-right: 6px; height: 20px; width: 75px; float:left; background-color: #317b9e; }
.example-block { overflow: hidden; margin-bottom: 10px; }
.example-block div:last-child { background: red; }&lt;/style&gt;

&lt;div class=&quot;example-block&quot;&gt;
  &lt;div class=&quot;example&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;example&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;example&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;example&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;example&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;example&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;More Resources&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/css3-selectors/&quot;&gt;W3C Selectors Level 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.css3.info/modules/selector-compat/&quot;&gt;CSS3 Compatibility Table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/cc351024%28VS.85%29.aspx&quot;&gt;MSDN Compatibility Table (tells you what works in IE8)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2009/06/15/take-your-design-to-the-next-level-with-css3/&quot;&gt;Take Your Design To The Next Level With CSS3&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
 </entry>
 
 <entry>
   <title>JSON(P) Stacking</title>
   <link href="http://dtsn.me/2009/12/06/jsonp-stacking.html"/>
   <updated>2009-12-06T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2009/12/06/jsonp-stacking</id>
   <content type="html">&lt;p&gt;JSONP was proposed as grabbing data from external domains avoiding the cross script scripting limitations (see this &lt;a href=&quot;http://ajaxian.com/archives/jsonp-json-with-padding&quot;&gt;Ajaxian article&lt;/a&gt; for more information). It requires a call to an external API where you specificy the a callback function, you do this through the use of script tag. For example:&lt;/p&gt;  

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://yourdomain.com/api?callback=myfunction&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the script tag has been loaded your function would be called with the JSON data, like so.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myfunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;some JSON data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However you become reliant on that external service to always be available, if for any reason that service goes down you wouldn’t get any data and your page would be likely to hang.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Therefore I propose a system of JSONP stacking, quite simply you stack up your JSON requests if you don’t receive a response in a set time it will stop the request.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This can be easily achieved by having the following function:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// callback function&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// success flag&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSONPStacking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// create the element&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// set the source&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;amp;amp;callback=callback&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// render the element&lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// start the counter, this one last for 5 seconds&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;// remove the element&lt;/span&gt;
			&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// say the data has been received&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// call the callback with the data&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically what we are doing here is to create a normal JSONP request by creating a script tag and loading it into the body. However we are overriding the standard callback function with our own one, &lt;em&gt;callback. &lt;/em&gt;When the request succeeds this will call that function with the data and in turn we call our success function. If 5 seconds have past the timeout will trigger, see if the success flag has been set if not it will remove the element from the DOM thereby stopping the request.&lt;/p&gt;

&lt;p&gt;That's it, it is a really simple principle but will hopefully stop your site from hanging on long request, such as for the Twitter widget. It will also make your widgets that you build a lot more stable and won't overload your site.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript Weather</title>
   <link href="http://dtsn.me/2009/11/26/javascript-weather.html"/>
   <updated>2009-11-26T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2009/11/26/javascript-weather</id>
   <content type="html">&lt;p&gt;Here’s a crazy idea, what would you do if you wanted to change the background picture of your website so it matches the weather. Luckily Its really easy, and I figured out all the hard bits for you.&lt;/p&gt;  &lt;p&gt;&lt;em&gt;UPDATE - Chris Heilmann over at the &lt;/em&gt;&lt;a href=&quot;http://developer.yahoo.net/blog/archives/2009/12/extending_the_weather_api_with_yql.html&quot;&gt;&lt;em&gt;Yahoo! Developer Network Blog&lt;/em&gt;&lt;/a&gt;&lt;em&gt; has made this even simpler through the use of YQL.&lt;/em&gt;&lt;/p&gt;  &lt;h2&gt;The Data&lt;/h2&gt;  &lt;p&gt;First of all we need a data source which will provide the weather for a particular location, we can grab this from the &lt;a href=&quot;http://developer.yahoo.com/weather/&quot;&gt;Yahoo Weather API&lt;/a&gt;. Using the code UKXX0117 which is for Reading, UK I can create the an RSS feed which you can see here &lt;a title=&quot;http://weather.yahooapis.com/forecastrss?p=UKXX0117&amp;amp;u=c&quot; href=&quot;http://weather.yahooapis.com/forecastrss?p=UKXX0117&amp;amp;u=c&quot;&gt;http://weather.yahooapis.com/forecastrss?p=UKXX0117&amp;amp;u=c&lt;/a&gt;. Great but how can we process this RSS feed? That’s where &lt;a href=&quot;http://pipes.yahoo.com&quot;&gt;Yahoo Pipes&lt;/a&gt; comes in, we can take in the RSS feed extract the data we need (item.yweather.condition) and export it as JSON.&lt;/p&gt; &lt;p&gt;Now we can access the JSON data for the weather in Reading &lt;a href=&quot;http://pipes.yahoo.com/pipes/pipe.run?_id=b13966505cb6b00dd1d18ec4aafc14b4&amp;amp;_render=json&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;  &lt;h2&gt;JavaScript&lt;/h2&gt;  &lt;p&gt;The JavaScript cannot directly call the JSON script via AJAX due to cross site scripting limitations imposed by the browser. This is where JSONP comes in, JSONP is a way to retrieve data from external domains through wrapping the JSON in a function, you can read more on JSONP at &lt;a href=&quot;http://bob.pythonmac.org/archives/2005/12/05/remote-json-jsonp/&quot;&gt;from__future__import&lt;/a&gt;. Yahoo Pipes fully supports the JSONP format using the parameter callback, therefore in our webpage we load up the following.&lt;/p&gt;  

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://pipes.yahoo.com/pipes/pipe.run?_id=b13966505cb6b00dd1d18ec4aafc14b4&amp;amp;_render=json&amp;amp;_callback=weather&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will call the function weather passing through a weather status code as the parameter.&lt;/p&gt;

&lt;p&gt;That is really it, you can do whatever you want with the data, here’s a quick example of how I would use it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;weather&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;32&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sunny&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;	
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Feature in Wired (UK)</title>
   <link href="http://dtsn.me/2009/11/04/im-in-wired.html"/>
   <updated>2009-11-04T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2009/11/04/im-in-wired</id>
   <content type="html">&lt;p&gt;At the end of September I was invited to a shoot for the UK edition of Wired. It was a shoot based around the twitterati of the UK and included some big names like Iain Dodsworth. The shoot was based at the old BT museum, which became defunct when their archive went online. You can see me and the other 24 people in Wired’s December Issue, on sale from today.&lt;/p&gt; 

&lt;img class=&quot;last&quot; src=&quot;http://img.wired.co.uk.s3.amazonaws.com/674x281/s_v/twitter674.jpg&quot; width=&quot;480&quot; height=&quot;200&quot; /&gt;
</content>
 </entry>
 
 <entry>
   <title>Building JavaScript Widgets</title>
   <link href="http://dtsn.me/2009/03/15/building-javascript-widgets.html"/>
   <updated>2009-03-15T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2009/03/15/building-javascript-widgets</id>
   <content type="html">&lt;p&gt;Little pieces of JavaScript you embed onto your website are getting more popular. Every major provider of a service on the web also gives you a little widget that you can put on your blog or webpage to promote what you are doing, for example &lt;a href=&quot;http://twitter.com/widgets&quot; target=&quot;_blank&quot;&gt;Twitter&lt;/a&gt;, &lt;a href=&quot;http://www.last.fm/widgets&quot; target=&quot;_blank&quot;&gt;Last FM&lt;/a&gt; and &lt;a href=&quot;http://digg.com/add-digg&quot; target=&quot;_blank&quot;&gt;Digg&lt;/a&gt; all provide widgets which are great for you and great for the service.&lt;/p&gt;
&lt;p&gt;I am going to talk you through the development and pitfalls associated with the design and development of widgets. &lt;/p&gt;
&lt;p&gt;First and foremost, you need to decide what you want to show with your widget. Knowing this you can make an educated choice about which method you want to use to create a widget, there are basically two methods associated with widget development.&lt;/p&gt;
&lt;h3&gt;IFrame’s&lt;/h3&gt;
&lt;p&gt;No, iframe’s aren’t dead. They are a major part of widget development. Using a &lt;code&gt;iframe&lt;/code&gt; is the easiest way to generate a widget - you host a small file on your web site which contains the information you want to show, like the &lt;a href=&quot;http://digg.com/tools/diggthis.php?u=http%3A//hehe2.net/linux-general/linuxcom-to-bring-social-web-to-linux-geeks/&amp;amp;t=Linux.com%20to%20Bring%20%u201CSocial%20Web%u201D%20To%20Linux%20Geeks%3F&quot; target=&quot;_blank&quot;&gt;Digg button&lt;/a&gt; for example, and get the JavaScript on the client side to build the URL to it. In the case of Digg the client side JavaScript builds a URL based on the current posts URL.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;iframe src=&amp;quot;http://yoururl&amp;quot; width=&amp;quot;50&amp;quot; height=&amp;quot;50&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To install the widget all you have to do is to point the user at your bit of JavaScript:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://yoururl/script.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can pass any variables you want through to the user at this point by simply making them JavaScript variables, and using the JavaScript to build up the &lt;code&gt;iframe&lt;/code&gt; URL based on these variables.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greeting&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://yoururl/script.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want your widget to be able to appear multiple times on the same webpage, you need to remember to set all the variables to &lt;code&gt;null&lt;/code&gt; at the end of your JavaScript file.&lt;/p&gt;
&lt;p&gt;That's it! &lt;code&gt;iframe&lt;/code&gt; based widgets are very easy to build and to use, however they do come with their downsides. The biggest of these is that the user can't customise the widget at all - it lives within an &lt;code&gt;iframe&lt;/code&gt; and therefore is untouchable by CSS. That's why certain widgets, like the twitter widget, which are made entirely on the client side in JavaScript.&lt;/p&gt;
&lt;h3&gt;Client Side&lt;/h3&gt;
&lt;p&gt;A widget that is built in JavaScript on the client side is definitely the harder option. For this you have to make the JavaScript file create all the HTML, write out a basic style to apply to the HTML and load in the data. When building this try to avoid using frameworks to build the HTML, this only creates more request for your web servers and make the widget slower to load. Instead resort to using the classical JavaScript methods for creating elements.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;div id=&amp;quot;your_id&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;you_id&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will have to load your data in from another source, and for this I recommend extending your API to give you a JavaScript variable followed by the JSON encoded data. Here's an example from &lt;a href=&quot;http://api.tweetmeme.com/popular.js?count=5&amp;amp;category=all&quot; target=&quot;_blank&quot;&gt;tweetmeme&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Pitfalls&lt;/h3&gt;
&lt;p&gt;There are a lot of difficulties involved in creating widgets and here are just a few of them:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;AJAX won’t work! You cannot post information between domains. &lt;/li&gt;
	&lt;li&gt;Don’t use a JavaScript framework - for a simple widget it’s is over kill. &lt;/li&gt;
	&lt;li&gt;Try to keep the requests down. These widgets are coming from your servers. &lt;/li&gt;
	&lt;li&gt;Anonymise the JavaScript, you don’t want it conflicting with other JavaScript. &lt;/li&gt;
	&lt;li&gt;Minimize your JavaScript. This will save on bandwidth for you, and make the widget faster to load.&amp;#160; &lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Script.aculo.us Transitions</title>
   <link href="http://dtsn.me/2009/03/08/script.aculo.us-transitions.html"/>
   <updated>2009-03-08T00:00:00+00:00</updated>
   <id>http://tom.preston-werner.com/2009/03/08/script.aculo.us-transitions</id>
   <content type="html">&lt;p&gt;I’ve been digging through the &lt;a href=&quot;http://script.aculo.us/&quot;&gt;Script.aculo.us&lt;/a&gt; code a lot recently and have stumbled upon a number of very effective transitions which aren’t used widely. There are 9 effects in total comprising of:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Transition&lt;/li&gt;
	&lt;li&gt;Linear&lt;/li&gt;
	&lt;li&gt;Reverse&lt;/li&gt;
	&lt;li&gt;Flicker&lt;/li&gt;
	&lt;li&gt;Wobble&lt;/li&gt;
	&lt;li&gt;Pulse&lt;/li&gt;
	&lt;li&gt;Spring&lt;/li&gt;
	&lt;li&gt;None&lt;/li&gt;
	&lt;li&gt;Full&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can see a full demo of all the the effects on the &lt;a href=&quot;http://github.com/madrobby/scriptaculous/wikis/effect-transitions&quot;&gt;Script.aculo.us Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All of Script.aculo.us’s effects will take a transition in the options array. For example we could apply a spring transition to our scroll to effect.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Super CSS, the power of the selector</title>
   <link href="http://dtsn.me/2008/10/15/super-css-the-power-of-the-selector.html"/>
   <updated>2008-10-15T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2008/10/15/super-css-the-power-of-the-selector</id>
   <content type="html">&lt;p&gt;We all love CSS it’s fundamental to the web. However most of us do not use the full power of CSS. A quick rummage around the W3C specification and you will see how powerful CSS can really be. I’m talking about the CSS selector, sure we all use the basic selectors, but what about the more complicated ones.&lt;/p&gt;
&lt;p&gt;Well here’s my guide to the most useful not very used CSS selectors (as well as what they are currently supported in).&lt;/p&gt;
&lt;h3&gt;CSS2&lt;/h3&gt;
&lt;table class=&quot;table&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; border=&quot;0&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th width=&quot;140&quot;&gt;Pattern&lt;/th&gt;
&lt;th width=&quot;360&quot;&gt;Meaning&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;IE6&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;IE7&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;FF&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;SF&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;OP&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E &amp;gt; F&lt;/td&gt;
&lt;td&gt;Matches any F element that is a child of an element E.&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E:first-child&lt;/td&gt;
&lt;td&gt;Matches element E when E is the first child of its parent. &lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E:link          &lt;br /&gt;E:visited &lt;/td&gt;
&lt;td&gt;Matches element E if E is the source anchor of a hyperlink of which the target is not yet visited (:link) or already visited (:visited). &lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E:active          &lt;br /&gt;E:hover           &lt;br /&gt;E:focus &lt;/td&gt;
&lt;td&gt;Matches E during certain user actions. &lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;nbsp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E + F&lt;/td&gt;
&lt;td&gt;Matches any F element immediately preceded by an element E.&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E[foo]&lt;/td&gt;
&lt;td&gt;Matches any E element with the &quot;foo&quot; attribute set (whatever the value). &lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E[foo=&quot;warning&quot;]&lt;/td&gt;
&lt;td&gt;Matches any E element whose &quot;foo&quot; attribute value is exactly equal to &quot;warning&quot;. &lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;last&quot;&gt;
&lt;td&gt;E[foo~=&quot;warning&quot;]&lt;/td&gt;
&lt;td&gt;Matches any E element whose &quot;foo&quot; attribute value is a list of space-separated values, one of which is exactly equal to &quot;warning&quot;. &lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;CSS3&lt;/h3&gt;
&lt;table class=&quot;table&quot; width=&quot;480&quot; border=&quot;0&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th width=&quot;140&quot;&gt;Pattern&lt;/th&gt;
&lt;th width=&quot;360&quot;&gt;Meaning&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;IE6&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;IE7&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;FF&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;SF&lt;/th&gt;
&lt;th width=&quot;10&quot;&gt;OP&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E ~ F&lt;/td&gt;
&lt;td&gt;Matches any F element preceded by an element E.&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E:empty&lt;/td&gt;
&lt;td&gt;Matches element E where E has no children, including text nodes&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10003;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&quot;center&quot;&gt;&amp;#10007;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you need a detailed walkthrough on how these selectors work, please refer to the &lt;a href=&quot;http://www.w3.org/TR/css3-selectors/&quot;&gt;W3C Specification on CSS3 Selectors&lt;/a&gt; (which includes all the CSS2 selectors).&lt;/p&gt;
&lt;h3&gt;A Couple of Examples&lt;/h3&gt;
&lt;p&gt;I couldn’t just give all these CSS selectors without giving you some great examples of how they can be used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;E:first-child/E:last-child – &lt;/strong&gt;You have a &lt;em&gt;ul&lt;/em&gt; list of elements which you float horizontally. With first child and last child you can easily set the margins for the first and last child different from the remaining items:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:first-child&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;li&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:last-child&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;E:empty – &lt;/strong&gt;You may have a situation where you have an empty paragraph. Paragraphs will always have a margin top and a margin bottom, which could look unsightly. So lets remove it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:empty&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>If the web was smaller</title>
   <link href="http://dtsn.me/2008/07/05/if-the-web-was-smaller-idea.html"/>
   <updated>2008-07-05T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2008/07/05/if-the-web-was-smaller-idea</id>
   <content type="html">&lt;p&gt;I’ve just had this crazy idea, what would happen if all the &lt;em&gt;&amp;lt;div&amp;gt;&lt;/em&gt; tags in the world were converted into &lt;em&gt;&amp;lt;d&amp;gt;&lt;/em&gt; tags. Image how much space it would save, well you don’t need to imagine I have broken out my calculator and worked it all out.&lt;/p&gt;

&lt;p&gt;Taking the top 5 website's from &lt;a href=&quot;http://www.alexa.com/site/ds/top_sites?ts_mode=global&amp;amp;lang=none&quot;&gt;Alexa&lt;/a&gt;:&lt;/p&gt;  &lt;table cellspacing=&quot;0&quot; cellpadding=&quot;2&quot; width=&quot;492&quot; border=&quot;0&quot;&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;100&quot;&gt;&lt;strong&gt;Website&lt;/strong&gt;&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;180&quot;&gt;&lt;strong&gt;Number of &amp;lt;div&amp;gt; Elements&lt;/strong&gt;&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;44&quot;&gt;&lt;strong&gt;Size&lt;/strong&gt;&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;166&quot;&gt;&lt;strong&gt;Size when &amp;lt;div&amp;gt; = &amp;lt;d&amp;gt;&lt;/strong&gt;&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;99&quot;&gt;Yahoo.com&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;180&quot;&gt;85&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;44&quot;&gt;153Kb&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;166&quot;&gt;152Kb&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;98&quot;&gt;Google.com&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;180&quot;&gt;6&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;44&quot;&gt;7.5Kb&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;166&quot;&gt;7.5Kb&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;99&quot;&gt;Youtube.com&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;180&quot;&gt;377&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;44&quot;&gt;76.8Kb&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;166&quot;&gt;75.3Kb&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;99&quot;&gt;Live.com&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;180&quot;&gt;27&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;44&quot;&gt;18.6Kb&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;166&quot;&gt;18.5Kb&lt;/td&gt;     &lt;/tr&gt;      &lt;tr&gt;       &lt;td valign=&quot;top&quot; width=&quot;99&quot;&gt;MSN.com&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;180&quot;&gt;140&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;44&quot;&gt;48.9Kb&lt;/td&gt;        &lt;td valign=&quot;top&quot; width=&quot;166&quot;&gt;48.3Kb&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt; 
 &lt;p&gt;For every element that would be converted to a &lt;em&gt;&amp;lt;d&amp;gt;,&lt;/em&gt; on average 5.93 bytes are saved. Considering that a typically website has 127 &lt;em&gt;&amp;lt;div&amp;gt;&lt;/em&gt; elements, taking from the average of the top 5 website's, this will create a saving of 0.753Kb per web page. That might not seem like a lot but added together across all the website's imagine how much time it would save.&lt;/p&gt;  

 &lt;p&gt;Of course this is just pie in the sky, but if the W3C thought of shrinking the HTML tags we use, website's would load faster, and every millisecond counts. Hopefully this will cause some debate on why HTML elements are longer than they need to be.&lt;/p&gt;  &lt;p&gt;I am only suggesting the HTML tags div and span since they convey no semantical meaning, unlike elements like p.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>JavaScript in CSS, Ugly But Interesting</title>
   <link href="http://dtsn.me/2008/05/12/javascript-in-css-ugly-but-intresting.html"/>
   <updated>2008-05-12T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2008/05/12/javascript-in-css-ugly-but-intresting</id>
   <content type="html">&lt;p&gt;There is a very little used and unknown method which allows you to utilise JavaScript within a CSS file. The CSS Expression property allows you to assign a JavaScript expression to a CSS property. For example, this allows you to set the position of an element according to the browser size.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;width&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt;&lt;span class='nx'&gt;expression&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;body&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;clientWidth&lt;/span&gt; &lt;span class='o'&gt;&amp;gt;&lt;/span&gt; &lt;span class='mi'&gt;950&lt;/span&gt; &lt;span class='o'&gt;?&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;950px&amp;quot;&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;100%&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Do not use CSS Expression, they are unreliable, slow and are only supported in IE!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS Expression suddenly came to me as a solution for the currently much debated feature &lt;a href='http://www.dave-woods.co.uk/index.php/css-variables/'&gt;here&lt;/a&gt; and &lt;a href='http://www.css3.info/new-features-proposed-for-css/'&gt;here&lt;/a&gt; of &lt;a href='http://disruptive-innovations.com/zoo/cssvariables/'&gt;variables&lt;/a&gt; in CSS3. This could theoretically be currently achieved through the use of CSS Expressions.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='css'&gt;&lt;span class='nt'&gt;body&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='k'&gt;background&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='n'&gt;expression&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nb'&gt;blue&lt;/span&gt;&lt;span class='p'&gt;());&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;CSS Expressions are horrible and unsupported, so please don&amp;#8217;t use them in development. They do, however, highlight a interesting and little known feature of CSS.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Prototype Element.Insert</title>
   <link href="http://dtsn.me/2008/05/01/elementinsert-javascript.html"/>
   <updated>2008-05-01T00:00:00+01:00</updated>
   <id>http://tom.preston-werner.com/2008/05/01/elementinsert-javascript</id>
   <content type="html">&lt;p&gt;&lt;a href='http://www.prototypejs.org'&gt;Prototype&lt;/a&gt; has a very useful function which is not well documented, &lt;a href='http://www.prototypejs.org/api/element/insert'&gt;Element.inset&lt;/a&gt;. Element.insert is a very powerful prototype function which lets you insert a element in one of 4 positions, &lt;em&gt;before, after, top, bottom&lt;/em&gt; of an element.&lt;/p&gt;

&lt;p&gt;If we wanted to insert an element after a element we would use this code:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;Element&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;first&lt;/span&gt;&lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='nx'&gt;element&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;top&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;content&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Expanding this further:&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='c1'&gt;// lets create our element&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;dummy&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Element&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;update&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='c1'&gt;// add the element&lt;/span&gt;
&lt;span class='nx'&gt;Element&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;insert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s1'&gt;&amp;#39;hook&amp;#39;&lt;/span&gt;&lt;span class='p'&gt;),&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;after&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;dummy&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Where hook is the element we want before our created element&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This code will add our Hello World text after the div with the id of hook.&lt;/p&gt;</content>
 </entry>
 
 
</feed>